introdução ao L9 

1-curso gratuito de laravel 9 
	-explicação do que é o projeto e como sera feito 
	
2-ferramenta para trabalhar com o laravel 9 
	-laravel 9 
	-docker 
	-vscode 
	-extensões específicas 

3-habiltiar o WSL2 e docker no windows 
	-já feita 

4-instalando o laravel 9 (feat. docker) 
	-setup: https://github.com/especializati/setup-docker-laravel/tree/laravel-9-com-php-8
	
5-versionar projetos laravel 9 e armazenar no git 
	-criado o repositório do projeto no github e feito o primeiro commit 

6-o que é o laravel - detalhes da estrutura 
	-laravel é todo um ecosistema para PHP 
	-explicação de cada função do laravel 

gestão de usuário 

7-criar e usar Controllers no laravel 
	-explicado sobre o básico de routes, criada route index de UserController 
	-os comandos artisan precisam ser realizados dentro do container app 
	-feitos diversos teste com rotas, controllers, e passando id por parametro entre eles 

8-trabalhar com migrations no laravel 
	-criada a conexão com o banco de dados no dbeaver 
	-rodada as migration que já vem default no laravel 
		php artisan migrate

9-trabalhar com Seeders no laravel 
	-permite criar um novo usuário como ponto de partida, por exemplo 
		-php artisan make:seeder UsersSeeder
	-configurado o seeder 'UsersSeeder.php'
	-rodado o cmd de seed 
		- php artisan db:seed 
	
10-listar registros do banco com o laravel 
	-configurado o controller UserController para uma variavel receber os dados da model User e em, 
		seguida, passada como parametro para a view, e la inserida via foreach 

11-listar registro do banco com o laravel 
	-criada a lógica de show com controller e view, para retornar dados de usuário se ele existir 

12-trabalhar com templates blade no laravel 
	-evitar a repetição de códigos 
	-usar o esquema de criar um layout padrão e, em seguida, usar os @yield e @section 

13-lidar com formulários no laravel 
	-criado a view de create, as routes de create e store, a function de create e store, e o form para submeter 

14-inserir registros no banco com o laravel 
	-testadas 2 maneiras de fazer a lógica na function do controller para salvar os dados no banco 

15-validar dados do formulário com o laravel (com form request) 
	-criado uma class para validação na model primeiramente 
		php artisan make:request StoreUpdateUserFormRequest
	-a lógica de validação é definida toda nesta class (no padrão do 'validator')
	
16-preparar para editar usuário no laravel 9 
	-criada a route de put/update, a function em controller de update e as configurações na view 

17-editar e validar usuário no laravel 9 
	-andamento na configuração de editação, configurado parte da class StoreUpdateUserFormRequest 

18-deletar usuário no laravel 9 
	-adaptada a view de show do usuario com botão delete dentro de um from, sempre não esquecer de @csrf e 
		@method('DELETE')
	-criada a route delete/destroy
	-criada o método destroy no controller 
	
19-filtrar usuários no laravel 9 
	-criada a adaptação da logica de search no metodo index do controller, criado o input na view também 

20-refatorando o CRUD de usuários no laravel 
	-criado uma pasta de 'includes' e de '_partials' onde ficam os alertas e o form, sendo reutilizado nas 
		diversas views por meio de @includes	
	-em controller, foi criado uma função __construct, a qual evita ter que instanciar toda vez a model USER, 
		sendo substituida por $this->model 
	-as query que fazem o search dentro do controller foram inseridas direto na model, onde deve ser 
	
21-usando o tailwind CSS no laravel 9 
	-explicando sobre o uso do tailwind 
	-criada uma nova branch 'ui-ux' para alterações de front-end 
	-incluídas todas as classes de CSS do tailwind no HTML das view 
	-feito o merge, estando na branch master e puxando as alterações da branch ui-ux (git merge ui-ux)

gestão de comentários 

22-criar model, migration e relacionamentos de comentários no laravel 
	-criando model junto com a migration de 'Comment'
		php artisan make:model Comment -m 
	-inserido toda estrutura necessária dos dados na referida model e migration 
	-feito o relacionamento na migration de 'Comment' para com a tabela de 'Users'
	-feito também o relacionamento em questão na tabela 'User' de um para muitos e em 'Comment' de 
		pertence a
	-rodada a migrate 

23-listando os registros(comentários) no laravel 
	-criando o controller de 'Comment': (o Admin cria uma pasta Admin e joga o controller nela)
		php artisan make:controller Admin\\CommentController
	-criado a pasta comments e dentro a view index dela 
	-configurada a view index de comments 
	-configurada a a function index de CommentController
	-criada a Route de index/get de CommentController 
	
24-cadastrar novo registro(comentários) no laravel 
	-criada a Route de create de CommentController
	-criada a lógica de create bo controller CommentController
	-criada a view create de comments 
	-adaptado o form de _partial de comment 
	-criada a Route de store de CommentController
	-criada a lógica de store no controller CommentController
	
25-atualizar comentários no laravel 9 
	-criada a Route de edit Comment 
	-criada a view de edit comment 
	-criada a lógica de edit em CommentController 
	-criada a lógica de update em CommentController
	-criada a route update Comment
	
26-filtrar comentários no laravel 9 
	-feita a lógica de search semelhante a de usuários, porem diretamente no index controller
	 de CommentController

27-validação no laravel 9 com form request 
	-criada uma class de validação para comment, semelhante a 'StoreUpdateUserFormRequest'
		php artisan make:request StoreUdateCommentRequest
	-criada a validação de body dentro desta class criada 

28-trabalhar com Eager Loading no laravel 9
	-inserido o contador de comentarios em index de users, bem como, na model User método 'with'

final 



	
